# AIO 分析器生產環境 Docker Compose 配置
# ==========================================
# 用於生產環境部署的優化配置

version: '3.8'

services:
  # PostgreSQL 數據庫（生產優化）
  db:
    image: postgres:15-alpine
    container_name: aio_analyzer_db_prod
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=zh_TW.UTF-8 --lc-ctype=zh_TW.UTF-8"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./scripts/postgresql.conf:/etc/postgresql/postgresql.conf
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - aio_network_prod
    restart: unless-stopped

  # Redis（生產優化）
  redis:
    image: redis:7-alpine
    container_name: aio_analyzer_redis_prod
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data_prod:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - aio_network_prod
    restart: unless-stopped

  # Django 應用（生產模式）
  web:
    build:
      context: .
      target: production
    container_name: aio_analyzer_web_prod
    environment:
      - DEBUG=False
      - DJANGO_SETTINGS_MODULE=aio_analyzer.settings
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - SERP_API_KEY=${SERP_API_KEY}
    volumes:
      - ./config:/app/config:ro
      - media_files_prod:/app/media
      - static_files_prod:/app/staticfiles
      - ./logs:/app/logs
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
      replicas: 2
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/core/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - aio_network_prod
    restart: unless-stopped

  # Celery Worker 集群
  celery-worker-general:
    build:
      context: .
      target: celery-worker
    environment:
      - DJANGO_SETTINGS_MODULE=aio_analyzer.settings
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - SERP_API_KEY=${SERP_API_KEY}
    volumes:
      - ./config:/app/config:ro
      - ./logs:/app/logs
      - media_files_prod:/app/media
    deploy:
      resources:
        limits:
          memory: 768M
        reservations:
          memory: 384M
      replicas: 3
    depends_on:
      - db
      - redis
    command: >
      sh -c "
        cd /app/backend &&
        celery -A aio_analyzer worker 
        --loglevel=info 
        --queues=gsc,ads,reports 
        --concurrency=2 
        --max-tasks-per-child=100
        --time-limit=1800
        --soft-time-limit=1500
      "
    networks:
      - aio_network_prod
    restart: unless-stopped

  # SERP 專用 Worker（低並發）
  celery-worker-serp:
    build:
      context: .
      target: celery-worker
    container_name: aio_analyzer_worker_serp_prod
    environment:
      - DJANGO_SETTINGS_MODULE=aio_analyzer.settings
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - SERP_API_KEY=${SERP_API_KEY}
    volumes:
      - ./config:/app/config:ro
      - ./logs:/app/logs
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    depends_on:
      - db
      - redis
    command: >
      sh -c "
        cd /app/backend &&
        celery -A aio_analyzer worker 
        --loglevel=info 
        --queues=serp 
        --concurrency=1
        --max-tasks-per-child=50
        --time-limit=3600
        --soft-time-limit=3300
      "
    networks:
      - aio_network_prod
    restart: unless-stopped

  # Celery Beat
  celery-beat:
    build:
      context: .
      target: celery-beat
    container_name: aio_analyzer_beat_prod
    environment:
      - DJANGO_SETTINGS_MODULE=aio_analyzer.settings
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./logs:/app/logs
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    depends_on:
      - db
      - redis
    networks:
      - aio_network_prod
    restart: unless-stopped

  # Nginx 負載均衡器
  nginx:
    image: nginx:alpine
    container_name: aio_analyzer_nginx_prod
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - static_files_prod:/var/www/static:ro
      - media_files_prod:/var/www/media:ro
    ports:
      - "80:80"
      - "443:443"
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    depends_on:
      - web
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - aio_network_prod
    restart: unless-stopped

  # 監控和日誌
  prometheus:
    image: prom/prometheus:latest
    container_name: aio_analyzer_prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - aio_network_prod
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: aio_analyzer_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    networks:
      - aio_network_prod
    restart: unless-stopped

  # 日誌收集
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.8.0
    container_name: aio_analyzer_filebeat
    user: root
    volumes:
      - ./monitoring/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - ./logs:/var/log/aio_analyzer:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: filebeat -e -strict.perms=false
    networks:
      - aio_network_prod
    restart: unless-stopped

# 網路配置
networks:
  aio_network_prod:
    driver: bridge
    name: aio_analyzer_network_prod
    ipam:
      config:
        - subnet: 172.20.0.0/16

# 數據卷配置
volumes:
  postgres_data_prod:
    name: aio_analyzer_postgres_data_prod
    driver: local
  redis_data_prod:
    name: aio_analyzer_redis_data_prod
    driver: local
  media_files_prod:
    name: aio_analyzer_media_prod
    driver: local
  static_files_prod:
    name: aio_analyzer_static_prod
    driver: local
  prometheus_data:
    name: aio_analyzer_prometheus_data
    driver: local
  grafana_data:
    name: aio_analyzer_grafana_data
    driver: local
